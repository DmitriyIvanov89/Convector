Classes:

class Main {

	private final QueueCapasity;
	private final MaxCountConsumers;
	private final MaxCountProducers;

	public static void main(Strings[] args) {

			try {
				validateArgs(String pathToFile);
				/*
				- Проверка есть ли файлы по путям из args(pathToFile);
				(String... args = {".\\src\\main\\resources\\orders44.md",".\\src\\main\\resources\\orders.csv",".\\src\\main\\resources\\orders.jsonl",".\\src\\main\\resources\\orders1.csv"};)
				- Проверка расширения файла(csv,jsonl);
				- Если файла нет или неизвестное расширение - пропустить фаил и продолжить валидацию
				- Запуск из командной строки: дир с jar файлом: java -jar filename.jar param(path to file)
				*/
			}

			BlockingQueue<Object> queue = new ArrayBlockingQueue<>();

			runConsumers(MaxCountConsumers);
			runProducers(MaxCountProducers,queue);

		}
	}

class ordersparser.Consumer implements Runnable {

	@Override
	public void runConsumers(MaxCountConsumers) {
		for (int i = 0 ; i < MaxCountConsumers; i++) {
				new Thread();
			}
		}.start();
}

/*CountDownlatch*/


class ordersparser.CsvProducer implement Runnable {
	private String pathToFile;
	private BlockingQueue queue;

	ExecutorService executorService = Executors.newFixedThreadPool(5);
	executorService.execute(new Runnable() {
		public void run() {

		}
	});
}

class ordersparser.JsonProducer implement Runnable {
	private String pathToFile;
	private BlockingQueue queue;

	ExecutorService executorService = Executors.newFixedThreadPool(5);
	executorService.execute(new Runnable() {
		public void run() {

		}
	});


}

enum ordersparser.ProducerType {
	ordersparser.CsvProducer;
	ordersparser.JsonProducer;
}

class ordersparser.Model {

	OrderIn {

	}

	OrderOut {

	}
}

class ordersparser.ConsolePrint {

}